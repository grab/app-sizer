{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"App Sizer","text":""},{"location":"#overview","title":"Overview","text":"<p>App Sizer is a tool designed to analyze the download size of Android applications. By providing detailed insights into the composition of your app's binary, App Sizer helps developers identify areas for size reduction, ultimately improving user acquisition and retention rates.</p> <p>The app download size in Android refers to the amount of data a user needs to download from an app store (typically Google Play Store) to install an application on their Android device</p> <p> </p>"},{"location":"#key-features","title":"Key Features","text":"<p>App Sizer offers comprehensive analysis including:</p> <ol> <li>Total app download size</li> <li>Detailed size breakdown</li> <li>Size contribution by teams</li> <li>Module-wise size contribution</li> <li>Size contribution by libraries</li> <li>List of large files</li> </ol> <p>Reports are generated based on the provided Android device specifications. Our blogpost introduce the tool features</p>"},{"location":"#integration","title":"Integration","text":"<p>App Sizer provides two flexible integration methods:</p> <ul> <li>A Gradle plugin that seamlessly integrates with your Android Gradle project (Plugin Configuration Detail.)</li> <li>A command-line tool to cater to non-Gradle build systems, offering the same comprehensive features (Commandline Configuration Detail.)</li> </ul> <p>Note: The command-line option was the original implementation and remains supported for broader compatibility.</p>"},{"location":"#report-types","title":"Report types","text":"<p>App Sizer currently supports three types of reports:</p> <ul> <li>InfluxDB database (1.x) - It is suitable for CI tracking and enabling the creation of customized dashboards (with visualization tools like Grafana). We provide an InfluxDB and Grafana setup; see our Docker Setup Guide.</li> <li>Markdown table for convenient local analysis.</li> <li>JSON data for compatibility with other platforms.</li> </ul> <p>The Markdown &amp; Json reports are saved as [option]-report.md in the configured output folder (default: app/build/sizer/reports)</p> <p>For more detail on reports, see Report Detail</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>App Sizer functions as a mapping tool to generate the report. It takes APK, AAR, and JAR files as inputs.</p> <ol> <li> <p>Input parsing:</p> <ul> <li>The tool parses the APK down to file and class levels. It calculates the contribution of each component to the total app download size.</li> <li>Similarly, App Sizer parses AAR and JAR files.</li> </ul> </li> <li> <p>Mapping and Report Generation:</p> <ul> <li>The tool then maps the APK components to their corresponding elements in the AAR and JAR files.</li> <li>Based on this analysis and other metadata, App Sizer generates comprehensive reports detailing size contributions.</li> </ul> </li> </ol>"},{"location":"#limitations","title":"Limitations","text":"<p>App Sizer approximates class download sizes due to Dex structure complexity, and may not accurately attribute sizes for inline functions or uncategorized files. Results should be interpreted as close estimates, best used for identifying trends and relative size comparisons rather than exact measurements.</p> <p>For more details on limitations, see the Limitation.</p>"},{"location":"#components","title":"Components","text":"<ul> <li>Gradle Plugin</li> <li>Command line tool</li> <li>InfluxDb &amp; Grafana Docker</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>If you find any issues or have suggestions for improvements, please open an issue or submit a pull request to the App Sizer repository.</p>"},{"location":"#license","title":"License","text":"<pre><code>MIT License\n\n\nCopyright 2024 Grabtaxi Holdings Pte Ltd (GRAB), All rights reserved.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE\n</code></pre>"},{"location":"cli/","title":"App Sizer CLI","text":"<p>App Sizer provides a Command Line Interface (CLI) to cater to non-Gradle build systems, offering the same comprehensive features as the Gradle plugin.</p>"},{"location":"cli/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Download our Latest Release from GitHub (support Java 11+)</p> </li> <li> <p>Create your config file following this template.</p> </li> <li> <p>Run the analysis using the command line tool:    <pre><code>java -jar cli-all.jar --config-file ./path/to/config/your-config-file.yml\n</code></pre></p> </li> </ol> <p>Note, by any reason the download Jar does not work. You could check out the repo and generate the command line binary file <pre><code>./gradlew cli:shadowJar\n</code></pre></p>"},{"location":"cli/#configuration","title":"Configuration","text":"<p>The App Sizer CLI accepts a YAML file as configuration (template). The file consists of three main blocks:</p> <pre><code>project-input:\n  # Configure the input for the project\napk-generation:\n  # APK Generation configuration\nreport:\n  # Output Configuration\n</code></pre>"},{"location":"cli/#project-input","title":"Project Input","text":"Property Description libraries-directory Path to all SDK &amp; library binaries that your project depends on. In Gradle, you can save all dependencies in a folder by setting a new Gradle home path for your build with the <code>-g</code> option. Example: <code>./gradlew assembleRelease -g ./new-gradle</code>. Then all dependency binaries will be saved to <code>./new-gradle/caches/modules-2/files-2.1</code> modules-directory Path to all of your modules' AAR &amp; Jar files. In Gradle, you can run <code>assembleDebug</code> in the project root folder to build all AAR/Jar files, then set the root folder for this property modules-dir-is-project-root Boolean value. Enable this flag if you set the root project as the modules-directory to optimize performance r8-mapping-file Path to the R8 mapping file if you enable R8 for your build owner-mapping-file Path to YAML file mapping project modules to team owners version Your app version large-file-threshold File size threshold (in bytes) for considering a file as large project-name Project name <p>And example of <code>owner-mapping-file</code>:</p> <pre><code>Platform:\n  - app\nTeam1:\n  - android-module-level1\n  - kotlin-module\nTeam2:\n  - sample-group:android-module-level2\n</code></pre>"},{"location":"cli/#apk-generation","title":"APK Generation","text":"Property Description bundle-tool Path to the bundletool JAR file app-bundle-file Path to the app bundle file (aab) device-specs List of device specification files for APK generation key-signing Key signing information"},{"location":"cli/#output-configuration","title":"Output Configuration","text":"Property Description output-directory Directory to save markdown and JSON reports custom-attributes Map of additional attributes to include in every report row influx-db-config InfluxDB configuration (see below)"},{"location":"cli/#influxdb-configuration","title":"InfluxDB Configuration","text":"Property Description url URL of the InfluxDB server db-name Name of the InfluxDB database report-table-name Measurement name for storing report data username InfluxDB username (optional) password InfluxDB password (optional) retention-policy InfluxDB retention policy configuration (optional)"},{"location":"cli/#full-configuration-example","title":"Full Configuration Example","text":"<pre><code>project-input:\n  libraries-directory: \"./build/gradle-cache/caches/modules-2/files-2.1\"\n  modules-directory: \"./\"\n  modules-dir-is-project-root: true\n  r8-mapping-file: \"./app/build/outputs/mapping/proDebug/mapping.txt\"\n  owner-mapping-file: \"./module-owner.yml\"\n  version: \"1.0.1\"\n  large-file-threshold: 10\n  project-name: \"sample\"\napk-generation:\n  bundle-tool: \"./binary/bundletool-all-1.15.4.jar\"\n  app-bundle-file: \"./app/build/outputs/bundle/proDebug/sample-bundle-file-pro-debug.aab\"\n  device-specs:\n    - \"./app-size-config/device-1.json\"\n    - \"./app-size-config/device-2.json\"\n  key-signing:\n    keystore-file: \"./buildsystem/sample-release.keystore\"\n    keystore-pw: \"12345678\"\n    key-alias: \"key0\"\n    key-pw: \"12345678\"\nreport:\n  output-directory: \"./build/app-sizer\"\n  custom-attributes:\n    pipelineId: \"100\"\n  influx-db-config:\n    db-name: \"sizer\"\n    url: \"http://localhost:8086\"\n    username: \"root\"\n    password: \"root\"\n    report-table-name: \"app_size\"\n    retention-policy:\n      name: \"app_sizer\"\n      duration: \"360d\"\n      shard-duration: \"0m\"\n      replication-factor: 2\n      is-default: true\n</code></pre>"},{"location":"cli/#resources","title":"Resources","text":"<ul> <li>Bundletool GitHub Repository</li> <li>InfluxDB Documentation</li> </ul>"},{"location":"docker/","title":"Sizer-influx-grafana","text":"<p>This is a Docker image based on the awesome docker-influxdb-grafana from Phil Hawthorne.</p>"},{"location":"docker/#key-different","title":"Key Different","text":"<ul> <li>Newer Grafana version</li> <li>Added provisioned app-sizer Dashboard and Datasources</li> <li>ChronoGraf is not included in this container</li> </ul> <p>The main purpose of this image is to be used to demo data from App Sizer.</p> Component Version InfluxDB 1.8.2 Grafana 9.0.0"},{"location":"docker/#pre-configured-dashboard","title":"Pre-configured Dashboard","text":"<p>The Docker image includes a pre-configured dashboard in Grafana:</p> <p> </p> <p>To use the dashboard, you either to:</p> <ol> <li>Default Configuration: Uses database name <code>sizer</code> and measurement (table) named <code>app_size</code>. (They are default values configured in the App Sizer tool)</li> <li>Custom Configuration:</li> <li>For a different database name: Update the Grafana Data Sources named InfluxDB.</li> <li>For a different measurement name: Update all queries and variables in the dashboard.</li> </ol> <p>To import the dashboard into an existing setup:</p> <ol> <li>Use this JSON file.</li> <li>Ensure you add the proper Grafana datasource.</li> <li>Update the measurement (table) name in the queries and variables if necessary</li> </ol>"},{"location":"docker/#quick-start","title":"Quick Start","text":"<p>To start the container with persistence, you can use our teammate's docker image exported to Docker Hub:</p> <pre><code>docker run -d \\\n  --name sizer-influxdb-grafana \\\n  -p 3003:3003 \\\n  -p 8086:8086 \\\n  -v /path/for/influxdb:/var/lib/influxdb \\\n  -v /path/for/grafana:/var/lib/grafana \\\n  mikenguyen/sizer-influx-grafana:latest\n</code></pre>"},{"location":"docker/#mapped-ports","title":"Mapped Ports","text":"Host Container Service 3003 3003 Grafana 8086 8086 InfluxDB"},{"location":"docker/#accessing-services","title":"Accessing Services","text":""},{"location":"docker/#grafana","title":"Grafana","text":"<ul> <li>URL: http://localhost:3003</li> <li>Default Username: <code>root</code></li> <li>Default Password: <code>root</code></li> </ul>"},{"location":"docker/#influxdb","title":"InfluxDB","text":"<ul> <li>Port: 8086</li> <li>Default Username: <code>root</code></li> <li>Default Password: <code>root</code></li> </ul>"},{"location":"limitation/","title":"Limitations","text":"<p>App Sizer is a powerful tool, but it has some limitations that users should be aware of. This document outlines the key limitations and explains their impact on the analysis results.</p>"},{"location":"limitation/#class-download-size-calculation","title":"Class Download Size Calculation","text":"<p>Calculating the exact download size of a class from an APK is challenging. App Sizer uses an approximation method:</p> <ol> <li>We obtain a relative size of the class definition (termed 'raw size').</li> <li>We use the Dex file download size that the class belongs to.</li> <li>We derive a relative value for the class's download size using the formula:</li> </ol> <pre><code>class's download size = class raw size * (dex download size / all classes' raw size)\n</code></pre> <p>This approach provides a reasonable estimation but may not be 100% accurate. Interestingly, similar tools in the community have independently developed comparable methods.</p>"},{"location":"limitation/#files-grouped-under-others","title":"Files Grouped Under \"Others\"","text":""},{"location":"limitation/#resourcesarsc-file","title":"resources.arsc File","text":"<p>The <code>resources.arsc</code> file is a special file in Android APKs containing precompiled resources (such as binary XML for strings, arrays, and other value types) in a binary format for efficient access.</p> <ul> <li>App Sizer does not analyze this file individually.</li> <li>It's grouped under the \"Others\" category.</li> <li>For small Android projects, this can disproportionately impact the data, potentially creating the illusion of an inefficient analysis.</li> </ul>"},{"location":"limitation/#uncategorized-files","title":"Uncategorized Files","text":"<ul> <li>Any files that cannot be categorized as Java/Kotlin code, resources, native libraries, or assets are automatically distributed to the app module and grouped under the \"Others\" category.</li> <li>Any files/classes that cannot find an owner (does not belong to a module or library) are automatically distributed to the app module</li> </ul>"},{"location":"limitation/#inline-functions-and-classes","title":"Inline Functions and Classes","text":"<p>The nature of inline functions and inline value classes in Kotlin presents a unique challenge:</p> <ul> <li>The size contributed by inline elements is calculated and distributed to where they are used, not where the inline methods/classes are created.</li> <li>Build systems or optimization tools like R8 might rewrite code for efficiency, including inlining methods, which can result in similar outcomes to inline functions.</li> </ul> <p>This behavior can make it difficult to accurately attribute size contributions to specific modules or libraries.</p>"},{"location":"limitation/#impact-on-analysis","title":"Impact on Analysis","text":"<p>These limitations mean that App Sizer's results should be interpreted as close approximations rather than exact measurements. They are most useful for:</p> <ul> <li>Identifying trends in app size growth</li> <li>Comparing relative size contributions of different components</li> <li>Spotting large, unexpected size increases</li> </ul> <p>Users should keep these limitations in mind when making decisions based on App Sizer's output, especially for small projects or when dealing with inline-heavy codebases.</p>"},{"location":"plugin/","title":"App Sizer Plugin","text":"<p>App Sizer provide a gradle plugin as the option to seamlessly integrates with your Android Gradle project. This option is recommended.</p>"},{"location":"plugin/#getting-started","title":"Getting Started","text":"<p>There are two ways to integrate the App Sizer plugin into your project:</p>"},{"location":"plugin/#option-1-plugins-dsl-recommended","title":"Option 1: Plugins DSL (Recommended)","text":"<ol> <li>Add the mavenCentral to your root <code>settings.gradle</code>: <pre><code>pluginManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre></li> <li>Add the plugin to your project classpath (root's build.gradle): <pre><code>plugins {\n    id \"com.grab.sizer\" version \"0.1.0-alpha02\" apply false\n}\n</code></pre></li> <li>Apply and configure the plugin to your app module's build.gradle: <pre><code>plugins {\n    id \"com.grab.sizer\" version \"0.1.0-alpha02\"\n}\n\nappSizer {\n    // Configuration goes here\n}\n</code></pre></li> </ol>"},{"location":"plugin/#option-2-legacy-buildscript-method","title":"Option 2: Legacy buildscript method","text":"<ol> <li>Add the plugin to your root <code>build.gradle</code> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath \"com.grab.sizer:sizer-gradle-plugin:0.1.0-alpha02\"\n    }\n}\n</code></pre></li> <li>Apply the plugin in your app module's <code>build.gradle</code> <pre><code>apply plugin: \"com.grab.sizer\"\n\nappSizer {\n    // Configuration goes here\n}\n</code></pre></li> </ol>"},{"location":"plugin/#run-the-analysis","title":"Run the analysis","text":"<pre><code>./gradlew app:appSizeAnalysis[Release|Debug] --no-configure-on-demand --no-configuration-cache\n</code></pre>"},{"location":"plugin/#configuration","title":"Configuration","text":"<p>Use the registered <code>appSizer</code> extension block to the app module's <code>build.gradle</code> to configure App Sizer Plugin</p> <p><pre><code>appSizer {\n    enabled = true\n    projectInput {\n        // config the input for the plugin\n    }\n    metrics {\n        // config the output for the plugin\n    }\n}\n</code></pre> * enabled: Given the App Sizer Plugin has not supported configuration on demand &amp; configuration catching. We provide you an option to turned of the plugin just in case it impact your gradle configuration performance.</p>"},{"location":"plugin/#project-input","title":"Project Input","text":"<p>Configure the input for the project:</p> <pre><code>appSizer {\n    projectInput {\n        largeFileThreshold = [your_threshold_in_bytes]\n        teamMappingFile = file(\"path/to/your/module-owner.yml\")\n        enableMatchDebugVariant = [true|false]\n        variantFilter { variant -&gt;\n            variant.setIgnore(variant.flavors.contains(\"your-ignore-flavor\"))\n        }\n        apk {\n            // APK Generation\n        }\n    }\n    ...\n}\n</code></pre> Property Description <code>largeFileThreshold</code> File size threshold (in bytes) for considering a file as large. <code>teamMappingFile</code> YAML file mapping project modules to team owners. <code>enableMatchDebugVariant</code> If true, uses debug AAR files to improve build performance. <code>variantFilter</code> Specifies which variants to exclude from analysis. <p>And example of <code>teamMappingFile</code>:</p> <pre><code>Platform:\n  - app\nTeam1:\n  - android-module-level1\n  - kotlin-module\nTeam2:\n  - sample-group:android-module-level2\n</code></pre>"},{"location":"plugin/#apk-generation","title":"APK Generation","text":"<p>Configure APK generation settings:</p> <pre><code>appSizer {\n    projectInput {\n        ...\n        apk {\n            deviceSpecs = [\n                file(\"path/to/device-1.json\"),\n                file(\"path/to/device-2.json\"),\n            ]\n            bundleToolFile = file(\"path/to/bundletool.jar\")\n        }\n    }\n    ...\n}\n</code></pre> Property Description <code>deviceSpecs</code> List of device specification files for APK generation. <code>bundleToolFile</code> Path to the bundletool JAR file."},{"location":"plugin/#output-configuration","title":"Output Configuration","text":"<p>Configure the reporting output:</p> <pre><code>appSizer {\n    ...\n    metrics {\n        influxDB {\n            dbName = \"[your-database-name]\"\n            reportTableName = \"[your-table-name]\"\n            url = \"[url-to-your-influxdb]\"\n            username = \"[your-database-username]\"\n            password = \"[your-database-password]\"\n        }\n        local {\n            outputDirectory = [your-output-directory] // Such as project.layout.buildDirectory.dir(\"app-sizer\")\n        }\n        customAttributes.putAll(\n            [\"your-custom-attribute-key\": \"your-custom-attribute-value\"]\n        )\n    }\n}\n</code></pre> Property Description <code>local.outputDirectory</code> Directory to save markdown and JSON reports (default is <code>app/build/sizer/reports</code>) <code>customAttributes</code> Map of additional attributes to include in every report row. Such as pipeline-id, etc"},{"location":"plugin/#influxdb-configuration","title":"InfluxDB Configuration","text":"Property Description <code>dbName</code> Name of the InfluxDB database. <code>reportTableName</code> Measurement name for storing report data. <code>url</code> URL of the InfluxDB server. <code>username</code> InfluxDB username (optional). <code>password</code> InfluxDB password (optional). <code>retentionPolicy</code> InfluxDB retention policy configuration (optional)."},{"location":"plugin/#full-configuration-example","title":"Full Configuration Example","text":"<pre><code>appSizer {\n    enabled = true\n    projectInput {\n        apk {\n            bundleToolFile = file(\"${rootProject.rootDir}/binary/bundletool-all-1.15.4.jar\")\n            deviceSpecs = [\n                file(\"${rootProject.rootDir}/app-size-config/device-1.json\"),\n                file(\"${rootProject.rootDir}/app-size-config/device-2.json\")\n            ]\n        }\n        variantFilter { variant -&gt;\n            variant.setIgnore(variant.flavors.contains(\"gea\"))\n        }\n        enableMatchDebugVariant = true\n        largeFileThreshold = 10\n        teamMappingFile = file(\"${rootProject.rootDir}/module-owner.yml\")\n    }\n    metrics {\n        influxDB {\n            dbName = \"sizer\"\n            reportTableName = \"app_size\"\n            url = \"http://localhost:8086\"\n            username = \"root\"\n            password = \"root\"\n            retentionPolicy {\n                name = \"app_sizer\"\n                duration = \"360d\"\n                shardDuration = \"0m\"\n                replicationFactor = 2\n                setAsDefault = true\n            }\n        }\n        local {\n            outputDirectory = project.layout.buildDirectory.dir(\"app-sizer\")\n        }\n        customAttributes.putAll(\n            [\"pipeline_id\": \"1001\"]\n        )\n    }\n}\n</code></pre>"},{"location":"plugin/#task-graph","title":"Task Graph","text":""},{"location":"plugin/#troubleshooting","title":"Troubleshooting","text":""},{"location":"plugin/#resource-verification-failures","title":"Resource Verification Failures","text":"<p>If you encounter issues with the <code>verifyResourceRelease</code> task, try these solutions: - Check that your resource files are properly formatted and located - Verify that resource names follow Android naming conventions - Enable the <code>enableMatchDebugVariant</code> flag in your configuration</p>"},{"location":"plugin/#dagger-nosuchmethoderror","title":"Dagger NoSuchMethodError","text":"<p>If you encounter this exception: <pre><code>NoSuchMethodError: 'java.lang.Object dagger.internal.Preconditions.checkNotNullFromProvides'\n</code></pre> This error typically occurs due to a version conflict between the Android build tools and the App-Sizer plugin's Dagger dependencies. To resolve:</p> <ol> <li>Ensure the App-Sizer plugin is added to the classpath in the root build.gradle before applying it to your app module</li> <li>If step 1 doesn't resolve the issue, you might have to resolve the Dagger version conflict by adding this to your classpath <pre><code>classpath \"com.google.dagger:dagger:2.47\"\n</code></pre></li> </ol>"},{"location":"plugin/#resources","title":"Resources","text":"<ul> <li>Bundletool GitHub Repository</li> <li>InfluxDB Documentation</li> </ul>"},{"location":"report/","title":"Reports","text":"<p>App Sizer supports three types of reports to cater to different use cases and environments:</p> <ol> <li>InfluxDB database (1.x)</li> <li>Markdown tables</li> <li>JSON data</li> </ol>"},{"location":"report/#influxdb-database","title":"InfluxDB Database","text":""},{"location":"report/#setup","title":"Setup","text":"<p>We provide a Docker image with InfluxDB (1.x) and Grafana pre-configured to showcase the dashboards:</p> <pre><code>docker run -d \\\n  --name sizer-influxdb-grafana \\\n  -p 3003:3003 \\\n  -p 3004:8083 \\\n  -p 8086:8086 \\\n  -v /path/for/influxdb:/var/lib/influxdb \\\n  -v /path/for/grafana:/var/lib/grafana \\\n  mikenguyen/sizer-influx-grafana:latest\n</code></pre> <p>For more details on the Docker setup, see our Docker guide.</p>"},{"location":"report/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>A default App Download Size Breakdown dashboard is included in the Grafana docker instance. If you have an existing InfluxDB and Grafana setup, you can import our dashboard using this JSON file. Our blogpost  introduce the provided dashboards</p>"},{"location":"report/#markdown-tables","title":"Markdown Tables","text":"<p>Markdown tables provide a convenient format for local analysis. The report is saved as <code>[option]-report.md</code> in the configured output folder (default: <code>app/build/sizer/reports</code>).</p>"},{"location":"report/#example-module-wise-size-contribution","title":"Example: Module-wise Size Contribution","text":"Contributor Owner Size app Platform 90.078 KB android-module-level2 Team2 123.968 KB android-module-level1 Team1 124.042 KB kotlin-module Team2 248.326 KB"},{"location":"report/#json-report","title":"JSON Report","text":"<p>JSON reports offer compatibility with other platforms and tools. The report is saved as <code>[option]-metrics.json</code> in the configured output folder.</p>"},{"location":"report/#json-structure","title":"JSON Structure","text":"<p>Here's a sample of the JSON structure:</p> <pre><code>[\n  {\n    \"name\": \"apk\",\n    \"fields\": [\n      {\n        \"name\": \"size\",\n        \"value\": \"1789199\",\n        \"value_type\": \"integer\"\n      },\n      {\n        \"name\": \"pipeline_id\",\n        \"value\": \"1001\",\n        \"value_type\": \"string\"\n      }\n    ],\n    \"tags\": [\n      {\n        \"name\": \"contributor\",\n        \"value\": \"apk\",\n        \"value_type\": \"string\"\n      },\n      {\n        \"name\": \"project\",\n        \"value\": \"sample\",\n        \"value_type\": \"string\"\n      },\n      {\n        \"name\": \"app_version\",\n        \"value\": \"1.0.9\",\n        \"value_type\": \"string\"\n      },\n      {\n        \"name\": \"build_type\",\n        \"value\": \"proDebug\",\n        \"value_type\": \"string\"\n      },\n      {\n        \"name\": \"device_name\",\n        \"value\": \"device-1\",\n        \"value_type\": \"string\"\n      }\n    ],\n    \"timestamp\": 1720248703061\n  },\n  // More measurements...\n]\n</code></pre>"},{"location":"report/#json-fields-explanation","title":"JSON Fields Explanation","text":"<p>Each object in the array represents a single database row and contains the following properties:</p> <ol> <li><code>name</code>: The measurement name (e.g., \"apk\")</li> <li><code>fields</code>: An array of fields containing numerical or custom data</li> <li><code>tags</code>: Each measurement includes relevant tags such as the project name, app version, build type, and device name, allowing for detailed analysis and filtering of the data.</li> <li><code>timestamp</code>: Unix timestamp (in milliseconds) when the measurement was taken</li> </ol>"},{"location":"report/#using-the-json-report","title":"Using the JSON Report","text":"<p>The JSON format makes it easy to:</p> <ol> <li>Import the data into various tools/databases</li> <li>Integrate with other CI/CD processes</li> <li>Perform programmatic analysis of app size trends over time</li> </ol> <p>You can parse this JSON data using any standard JSON library in your preferred programming language to extract and analyze the information as needed for your project.</p>"},{"location":"report/#customizing-reports","title":"Customizing Reports","text":"<p>You can customize the reports by modifying the configuration in your Gradle plugin or CLI tool setup. For more details, refer to the Plugin Configuration or CLI Configuration guides.</p>"},{"location":"task_graph/","title":"Task graph","text":"<pre><code>flowchart TD\n  A(generateApkDebug)\n  B(generateArchiveDepDebug)\n  C(appSizeAnalysisDebug)\n\n\n  C --&gt; A\n  C --&gt; B</code></pre>"}]}